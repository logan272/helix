[[language]]
name = "rust"

[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]

[language-server.emmet-ls]
command = "emmet-language-server"
args = ["--stdio"]


[language-server.eslint-ls]
args = ["--stdio"]
command = "vscode-eslint-language-server"

[language-server.eslint-ls.config]
format = true
nodePath = ""
onIgnoredFiles = "off"
packageManager = "yarn"
quiet = false
rulesCustomizations = []
run = "onType"
useESLintClass = false
validate = "on"
codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = true } }
codeActionOnSave = { mode = "all" }
experimental = { }
problems = { shortenToSingleLine = false }
workingDirectory = { mode = "auto" }

[language-server.vscode-json-language-server.config]
json = { validate = { enable = true }, format = { enable = true } }
provideFormatter = true

[language-server.vscode-css-language-server.config]
css = { validate = { enable = true } }
scss = { validate = { enable = true } }
less = { validate = { enable = true } }
provideFormatter = true

[language-server.typescript-language-server.config]
documentFormatting = false
hostInfo = "helix"

[[language]]
name = "html"
formatter = { command = "prettier", args = ["--parser", "html"] }
language-servers = ["vscode-html-language-server", "tailwindcss-ls", "emmet-ls"]
auto-format = true

[[language]]
name = "css"
formatter = { command = "prettier", args = ["--parser", "css"] }
language-servers = [ "vscode-css-language-server", "tailwindcss-ls", "emmet-ls"]
auto-format = true

[[language]]
name = "json"
language-servers = [ "vscode-json-language-server" ]
formatter = { command = "prettier", args = ["--parser", "json"] }
auto-format = true


[[language]]
name = "typescript"
language-servers = ["typescript-language-server", "tailwindcss-ls", "eslint-ls", "emmet-ls"]
formatter = { command = "prettier", args = ["--parser", "typescript" ]}
auto-format = true
roots = ["package.json"]

[[language]]
name = "tsx"
language-servers = ["typescript-language-server", "tailwindcss-ls", "eslint-ls", "emmet-ls"]
formatter = { command = "prettier", args = ["--parser", "typescript" ]}
auto-format = true
roots = ["package.json"]

[[language]]
name = "javascript"
language-servers = ["typescript-language-server", "tailwindcss-ls", "eslint-ls", "emmet-ls"]
formatter = { command = "prettier", args = ["--parser", "typescript" ]}
auto-format = true
roots = ["package.json"]

[language-server.typescript-language-server.config.typescript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true

[language-server.typescript-language-server.config.completions]
completeFunctionCalls = true

[language-server.typescript-language-server.config.javascript.inlayHints]
includeInlayEnumMemberValueHints = true
includeInlayFunctionLikeReturnTypeHints = true
includeInlayFunctionParameterTypeHints = true
includeInlayParameterNameHints = "all"
includeInlayParameterNameHintsWhenArgumentMatchesName = true
includeInlayPropertyDeclarationTypeHints = true
includeInlayVariableTypeHints = true
